name: unit-tests-gh-hosted

on:
  pull_request:
  push:
    branches:
      - master
      - open-release/lilac.master

jobs:
  run-test:
    name: ${{ matrix.shard_name }}(py=${{ matrix.python-version }},dj=${{ matrix.django-version }},mongo=${{ matrix.mongo-version }})
    if: (github.repository != 'openedx/edx-platform' && github.repository != 'edx/edx-platform-private') || (github.repository == 'openedx/edx-platform' && (startsWith(github.base_ref, 'open-release') == true))
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version:
          - "3.11"
        django-version:
          - "pinned"
        # When updating the shards, remember to make the same changes in
        # .github/workflows/unit-tests.yml
        shard_name:
          - "lms-1"
          - "lms-2"
          - "lms-3"
          - "lms-4"
          - "lms-5"
          - "lms-6"
          - "openedx-1-with-lms"
          - "openedx-2-with-lms"
          - "openedx-1-with-cms"
          - "openedx-2-with-cms"
          - "cms-1"
          - "cms-2"
          - "common-with-lms"
          - "common-with-cms"
          - "xmodule-with-lms"
          - "xmodule-with-cms"
        mongo-version:
          - "7.0"

        # We only need to test older versions of Mongo with modules that directly interface with Mongo (that is: xmodule.modulestore)
        # This code is left here as an example for future refernce in case we need to reduce the number of shards we're
        # testing but still have good confidence with older versions of mongo.  We use Mongo 4.4 in the example.
        #
        # exclude:
        #   - mongo-version: "4.4"
        # include:
        #   - shard_name: "xmodule-with-cms"
        #     python-version: "3.11"
        #     django-version: "pinned"
        #     mongo-version: "4.4"
        #   - shard_name: "xmodule-with-lms"
        #     python-version: "3.11"
        #     django-version: "pinned"
        #     mongo-version: "4.4"
    steps:
      - uses: actions/checkout@v2

      - name: Install Required System Packages
        run: sudo apt-get update && sudo apt-get install libxmlsec1-dev lynx

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: ${{ matrix.mongo-version}}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache pip dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/edx/testing.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Required Python Dependencies
        env:
          PIP_SRC: ${{ runner.temp }}
        run: |
          make test-requirements
          if [[ "${{ matrix.django-version }}" != "pinned" ]]; then
            pip install "django~=${{ matrix.django-version }}.0"
            pip check # fail if this test-reqs/Django combination is broken
          fi

      - name: Setup and run tests
        uses: ./.github/actions/unit-tests

      - name: Renaming coverage data file
        run: |
          mv reports/.coverage reports/${{ matrix.shard_name }}.coverage

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: reports/${{matrix.shard_name}}.coverage

  collect-and-verify:
    if: (github.repository != 'openedx/edx-platform' && github.repository != 'edx/edx-platform-private') || (github.repository == 'openedx/edx-platform' && (startsWith(github.base_ref, 'open-release') == true))
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [ '3.11' ]
        django-version:
          - "pinned"
    steps:
      - uses: actions/checkout@v2

      - name: Install Required System Packages
        run: sudo apt-get update && sudo apt-get install libxmlsec1-dev

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache pip dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/edx/testing.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Required Python Dependencies
        run: |
          make test-requirements
          if [[ "${{ matrix.django-version }}" != "pinned" ]]; then
            pip install "django~=${{ matrix.django-version }}.0"
            pip check # fail if this test-reqs/Django combination is broken
          fi

      - name: verify unit tests count
        uses: ./.github/actions/verify-tests-count

  compile-warnings-report:
    runs-on: [ edx-platform-runner ]
    needs: [ run-tests ]
    steps:
      - name: sync directory owner
        run: sudo chown runner:runner -R .*
      - uses: actions/checkout@v3
      - name: collect pytest warnings files
        uses: actions/download-artifact@v3
        with:
          name: pytest-warnings-json
          path: test_root/log

      - name: display structure of downloaded files
        run: ls -la test_root/log

      - name: compile warnings report
        run: |
          python openedx/core/process_warnings.py --dir-path test_root/log --html-path reports/pytest_warnings/warning_report_all.html

      - name: save warning report
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: pytest-warning-report-html
          path: |
            reports/pytest_warnings/warning_report_all.html

  # Combine and upload coverage reports.
  coverage:
    needs: run-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.8 ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: reports

      - name: Install Python dependencies
        run: |
          pip install -r requirements/edx/coverage.txt

      - name: Run coverage
        run: |
          coverage combine reports/*
          coverage report
          coverage xml
      - uses: codecov/codecov-action@v3
